name: All Platform Build

on:
  release:
    types: [released]
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - name: Repo Checkout
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@master

      - name: Get Dependencies and PyInstaller
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build PyInstaller Bootloader
        run: |
          git clone https://github.com/pyinstaller/pyinstaller.git --depth=1
          cd pyinstaller/bootloader
          python ./waf all
          rm -r "$(python -c "import os, sys; print(os.path.dirname(sys.executable))")${{ runner.os == 'Windows' && '' || '/..'}}/Lib/site-packages/PyInstaller/bootloader"
          cp -r "../PyInstaller/bootloader" "$(python -c "import os, sys; print(os.path.dirname(sys.executable))")${{ runner.os == 'Windows' && '' || '/..'}}/Lib/site-packages/PyInstaller"
          ls "$(python -c "import os, sys; print(os.path.dirname(sys.executable))")/Lib/site-packages/PyInstaller/bootloader"

#      - name: PyInstaller Build
#        run: ${{ runner.os == 'Windows' && 'iex ' || ''}}$(cat pyinstaller_${{ runner.os == 'Windows' && 'windows' || runner.os == 'Linux' && 'linux' || 'macos' }}.txt)

#      - name: Get Latest Release Info
#        id: latest-release
#        uses: actions/github-script@v2
#        with:
#          script: |
#            return github.repos.getLatestRelease({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#            })

#      - name: Upload Release Binary
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ fromJSON(steps.latest-release.outputs.result).data.upload_url }}
#          asset_path: ./dist/GModCEFCodecFix${{ runner.os == 'Windows' && '.exe' || '' }}
#          asset_name: GModCEFCodecFix-${{ runner.os }}${{ runner.os == 'Windows' && '.exe' || '' }}
#          asset_content_type: application/octet-stream
